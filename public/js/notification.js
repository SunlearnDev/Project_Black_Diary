$.ajaxSetup({
    headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
});
/* *******************  CKE5 tr√¨nh so·∫°n th·∫£o ****************** */
const contentElement = document.querySelector('#content');
if (contentElement) {
    ClassicEditor
        .create(document.querySelector('#content'), {
            ckfinder: {
                uploadUrl: "{{ route('cheditor.upload', ['_token' => csrf_token()]) }}",
            }
        })
        .catch(error => {
            console.error(error);
        });
}
const delConfirms = document.querySelectorAll('.js-comfirm-delete');
const openConfirm = document.querySelector('.comfirm');
const deleteOk = document.querySelector('.delete-confirm');
const isFollowingBtn = document.querySelector('.follow-btn');
const reactionsContainer = document.querySelector('.reactions-icon');
const token = document.head.querySelector('meta[name="csrf-token"]')?.content;

// Function read time
function readingTime() {
    const texts = document.querySelectorAll('.contents');

    texts.forEach((text) => {
        const postId = text.getAttribute('data-post-id');
        const wpm = 200; // Words per minute
        const words = text.textContent.trim().split(/\s+/).length;
        const time = Math.ceil(words / wpm);

        // Find the reading time container for the specific post
        const readingTimeElement = document.getElementById(`readingTime_${postId}`);

        if (readingTimeElement) {
            // Update the content of the reading time container
            readingTimeElement.innerText = `${time} minute${time !== 1 ? 's' : ''} read`;
        }
    });
}
// Call the readingTime function when the web page is loaded
document.addEventListener('DOMContentLoaded', readingTime);
// hien thi thong bao
$(document).ready(function () {
    // L·∫•y th√¥ng b√°o ban ƒë·∫ßu khi trang web ƒë∆∞·ª£c t·∫£i
    getNotifications();

    // L·∫Øng nghe s·ª± ki·ªán click ƒë·ªÉ l·∫•y th√¥ng b√°o m·ªõi
    $('#notifications').on('click', function () {
        getNotifications();
    });

    // H√†m ƒë·ªÉ l·∫•y th√¥ng b√°o s·ª≠ d·ª•ng Ajax
    function getNotifications() {
        $.ajax({
            url: '/user/notifications',
            type: 'GET',
            success: function (response) {
                // Hi·ªÉn th·ªã th√¥ng b√°o

                showNotifications(response);
                // console.log("Response Data:", response);
            },
            error: function (error) {
                console.error('Error fetching notifications:', error);
            }
        });
        // console.log("üöÄ ~ file: welcome.blade.php:115 ~ getNotifications ~ response:", response)
    }

    // H√†m ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
    function showNotifications(notifications) {
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o
        $('#notification-count').text(notifications.length);

        // L·∫•y ph·∫ßn t·ª≠ ul ƒë·ªÉ th√™m th√¥ng b√°o
        var notificationList = $('#notifications');

        // X√≥a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ li trong danh s√°ch tr∆∞·ªõc khi th√™m m·ªõi
        notificationList.empty();

        // Ki·ªÉm tra n·∫øu c√≥ th√¥ng b√°o
        if (notifications.length > 0) {
            // Duy·ªát qua danh s√°ch th√¥ng b√°o v√† th√™m v√†o danh s√°ch
            notifications.forEach(function (notification) {
                var listItem = $('<li>').attr('id', 'notification-li');
                var button = $('<button>').addClass(
                    'flex items-center w-full justify-between grid-row py-4 rounded text-gray-500 dark:text-black hover:text-blue-600 dark:hover:bg-blue-200 group px-2'
                );
                // Th√™m h√¨nh ·∫£nh avatar
                var avatar = $('<img>').addClass(
                    'w-10 h-10 p-1 rounded-full ring-2 ring-green-300 mr-2').attr('src',
                        notification.data.follower_avatar);
                button.append(avatar);

                // Th√™m th√¥ng b√°o v·ªõi t√™n ng∆∞·ªùi theo d√µi v√† d√≤ng ch·ªØ "started following you"
                var notificationText = $('<span>').html(
                    `<strong>${notification.data.follower_name}</strong> started following you`);
                button.append(notificationText);

                listItem.append(button);
                notificationList.append(listItem);
            });
        } else {
            // N·∫øu kh√¥ng c√≥ th√¥ng b√°o, th√™m m·ªôt ph·∫ßn t·ª≠ span ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o "No notifications"
            notificationList.append(
                '<li id="notification-li"><button class="flex items-center w-full justify-between  text-gray-500 dark:text-black hover:text-blue-600 dark:hover:bg-blue-200 group px-2"><span class="w-full py-2 ">No notifications</span></button></li>'
            );
        }
    }
});